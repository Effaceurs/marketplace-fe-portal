{"ast":null,"code":"import _classCallCheck from \"D:\\\\soft\\\\msys2\\\\home\\\\user\\\\work\\\\marketplace\\\\app\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\soft\\\\msys2\\\\home\\\\user\\\\work\\\\marketplace\\\\app\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { AuthService } from \"../services/auth.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport var TokenInterceptor = /*#__PURE__*/(function () {\n  var TokenInterceptor = /*#__PURE__*/function () {\n    function TokenInterceptor(auth, router) {\n      _classCallCheck(this, TokenInterceptor);\n\n      this.auth = auth;\n      this.router = router;\n    }\n\n    _createClass(TokenInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        var _this = this;\n\n        if (this.auth.isAuthenticated()) {\n          req = req.clone({\n            setHeaders: {\n              Authorization: this.auth.getToken()\n            }\n          });\n        }\n\n        return next.handle(req).pipe(catchError(function (error) {\n          return _this.handleAuthError(error);\n        }));\n      }\n    }, {\n      key: \"handleAuthError\",\n      value: function handleAuthError(error) {\n        if (error.status === 401) {\n          this.router.navigate(['/login'], {\n            queryParams: {\n              sessionFailed: true\n            }\n          });\n        }\n\n        return throwError(error);\n      }\n    }]);\n\n    return TokenInterceptor;\n  }();\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}